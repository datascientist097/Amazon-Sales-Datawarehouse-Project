# -*- coding: utf-8 -*-
"""salesdata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13UCXlP9QVC5i98C-r1I3Nr4x_XZPxUvs

# **Amazon Sales Data warehouse**
"""

import datetime as dt
import pandas as pd
import random
# Function to generate sample data for each table
def generate_sample_data(num_rows):
    data = {
        'TransactionID': range(1, num_rows + 1),
        'CustomerID': range(1001, 1001 + num_rows),
        'ProductID' : range(3001, 3001 + num_rows),
        'ProductName': ['Shirt_' + str(i) for i in range(1, num_rows + 1)],
        'Category': ['Electronics', 'Clothing', 'Books', 'Home & Kitchen', 'Sports'] * (num_rows // 5),
        'Price': [random.randint(10, 500) for _ in range(num_rows)],
        'Quantity': [random.randint(1, 5) for _ in range(num_rows)],
        'CustomerName': ['Seher_' + str(i) for i in range(1001, 1001 + num_rows)],
        'CustomerAge': [random.randint(18, 80) for _ in range(num_rows)],
        'CustomerGender': ['Male', 'Female'] * (num_rows // 2),
        'CustomerAddress': ['Address_' + str(i) for i in range(1001, 1001 + num_rows)],
        'CustomerEmail': ['customer' + str(i) + '@example.com' for i in range(1001, 1001 + num_rows)],
        'PurchaseDate': pd.date_range(start='2021-01-01', periods=num_rows),
        'PaymentMethod': ['Credit Card', 'Debit Card', 'Net Banking', 'Cash on Delivery'] * (num_rows // 4),
        'Rating': [random.randint(1, 5) for _ in range(num_rows)],
        'SalesPersonID': [random.randint(1, 10) for _ in range(num_rows)],
        'RegionID': [random.randint(1, 5) for _ in range(num_rows)],
        'PaymentMethodID': [random.randint(1, 4) for _ in range(num_rows)],
        'RatingID': [random.randint(1, 5) for _ in range(num_rows)],
        'ReturnDate': [dt.datetime.now() + dt.timedelta(days=random.randint(1, 30)) for _ in range(num_rows)],
        'DiscountAmount': [random.randint(1, 50) for _ in range(num_rows)],
        'SalesRegion': ['South Asia', 'Middle East', 'Europe', 'Central Asia'] * (num_rows // 4),
        'PromotionID': [random.randint(1, 10) for _ in range(num_rows)],
        'ShippingMethod': ['Standard Shipping', 'Express Shipping', 'Next Day Delivery', 'Store Pickup'] * (num_rows // 4),
        'ShippingCost': [5.99, 9.99, 12.99, 0] * (num_rows // 4),
        'SalesPersonName': ['Ahmed_' + str(i) for i in range(1, num_rows + 1)],
    }
    return pd.DataFrame(data)

# Number of rows for each table
num_rows_per_table = 10000

# Create an empty list to store data frames for each table
tables_data = []

# Generate data frames for each table and append to the list
for i in range(1, 11):
    table_data = generate_sample_data(num_rows_per_table)
    tables_data.append(table_data)

# Concatenate data frames for all tables
df = pd.concat(tables_data, ignore_index=True)

# Save concatenated data frame to a single CSV file
df.to_csv('amazonsales.csv', index=False)

print("CSV file created successfully!")

df.head()

df.columns

import sqlite3

# Connect to SQLite database (create if not exists)
conn = sqlite3.connect('amazon_sales_dw.db')
c = conn.cursor()

# Create Customers Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Customers (
        CustomerID INTEGER PRIMARY KEY,
        CustomerName TEXT,
        CustomerAge INTEGER,
        CustomerGender TEXT,
        CustomerAddress TEXT,
        CustomerEmail TEXT
    )
''')

# Create Products Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Products (
        ProductID INTEGER PRIMARY KEY,
        ProductName TEXT,
        Category TEXT,
        Price INTEGER
    )
''')

# Create Salespersons Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Salespersons (
        SalesPersonID INTEGER PRIMARY KEY,
        SalesPersonName TEXT
    )
''')

# Create Regions Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Regions (
        RegionID INTEGER PRIMARY KEY,
        SalesRegion TEXT
    )
''')

# Create Payment Methods Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS PaymentMethods (
        PaymentMethodID INTEGER PRIMARY KEY,
        PaymentMethod TEXT
    )
''')

# Create Rating Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Ratings (
        RatingID INTEGER PRIMARY KEY,
        Rating INTEGER
    )
''')

# Create Transactions Dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Transactions (
        TransactionID INTEGER PRIMARY KEY,
        CustomerID INTEGER,
        ProductID INTEGER,
        SalesPersonID INTEGER,
        RegionID INTEGER,
        PurchaseDate TEXT,
        PaymentMethodID INTEGER,
        RatingID INTEGER,
        FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
        FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
        FOREIGN KEY (SalesPersonID) REFERENCES Salespersons(SalesPersonID),
        FOREIGN KEY (RegionID) REFERENCES Regions(RegionID),
        FOREIGN KEY (PaymentMethodID) REFERENCES PaymentMethods(PaymentMethodID),
        FOREIGN KEY (RatingID) REFERENCES Ratings(RatingID)
    )
''')

# Create Inventory dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Inventory (
        ProductID INTEGER,
        Quantity INTEGER,
        FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
    )
''')

# Create Returns dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Returns (
        TransactionID INTEGER,
        ReturnDate TEXT,
        FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID)
    )
''')

# Create Discounts dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Discounts (
        TransactionID INTEGER,
        DiscountAmount INTEGER,
        FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID)
    )
''')

# Create Promotions dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Promotions (
        TransactionID INTEGER,
        PromotionID INTEGER,
        FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID)
    )
''')

# Create Shipping dimension Table
c.execute('''
    CREATE TABLE IF NOT EXISTS Shipping (
        TransactionID INTEGER,
        ShippingMethod TEXT,
        ShippingCost INTEGER,
        FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID)
    )
''')

c.execute('''
    CREATE TABLE IF NOT EXISTS facttable (
          TransactionID INTEGER PRIMARY KEY,
          CustomerID INTEGER,
          ProductID INTEGER,
          SalesPersonID INTEGER,
          RegionID INTEGER,
          PaymentMethodID INTEGER,
          PaymentMethod TEXT,
          Quantity INTEGER,
          FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
          FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
          FOREIGN KEY (SalesPersonID) REFERENCES Salespersons(SalesPersonID),
          FOREIGN KEY (RegionID) REFERENCES Regions(RegionID),
          FOREIGN KEY (PaymentMethodID) REFERENCES PaymentMethods(PaymentMethodID)
    )
''')



# Commit changes and close connection
conn.commit()
conn.close()

print("Data warehouse schema for Amazon sales created successfully!")

import pandas as pd
import sqlite3
from tabulate import tabulate

# Read data from CSV file
df = pd.read_csv('amazonsales.csv')

# Connect to SQLite database
conn = sqlite3.connect('amazon_sales_dw.db')
c = conn.cursor()

# Insert data into Customers table
df_customers = df[['CustomerID', 'CustomerName', 'CustomerAge', 'CustomerGender', 'CustomerAddress', 'CustomerEmail']].copy()
df_customers.to_sql('Customers', conn, if_exists='replace', index=False)

# Insert data into Products table
df_products = df[['ProductID', 'ProductName', 'Category', 'Price']].copy()
df_products.to_sql('Products', conn, if_exists='replace', index=False)

# Insert data into Salespersons table
df_Salespersons = df[['SalesPersonID', 'SalesPersonName']].copy()
df_Salespersons.to_sql('Salespersons', conn, if_exists='replace', index=False)

# Insert data into Regions table
df_regions = df[['RegionID', 'SalesRegion']].copy()
df_regions.drop_duplicates(inplace=True)
df_regions.to_sql('Regions', conn, if_exists='replace', index=False)

# Insert data into PaymentMethods table
df_payment_methods = df[['PaymentMethodID', 'PaymentMethod']].copy()
df_payment_methods.drop_duplicates(inplace=True)
df_payment_methods.to_sql('PaymentMethods', conn, if_exists='replace', index=False)

# Insert data into Ratings table
df_ratings = df[['RatingID', 'Rating']].copy()
df_ratings.drop_duplicates(inplace=True)
df_ratings.to_sql('Ratings', conn, if_exists='replace', index=False)

# Insert data into Transactions table
df_transactions = df[['TransactionID', 'CustomerID', 'ProductID', 'Price', 'Quantity', 'PurchaseDate', 'PaymentMethodID', 'RatingID']].copy()
df_transactions.to_sql('Transactions', conn, if_exists='replace', index=False)

# Insert data into Inventory table
df_inventory = df[['ProductID', 'Quantity']].copy()
df_inventory.to_sql('Inventory', conn, if_exists='replace', index=False)

# Insert data into Returns table
df_returns = df[['TransactionID', 'PurchaseDate', 'ReturnDate']].copy()
df_returns.to_sql('Returns', conn, if_exists='replace', index=False)

# Insert data into Discounts table
df_discounts = df[['TransactionID', 'DiscountAmount']].copy()
df_discounts.to_sql('Discounts', conn, if_exists='replace', index=False)

# Insert data into Promotions table
df_promotions = df[['TransactionID', 'PromotionID']].copy()
df_promotions.to_sql('Promotions', conn, if_exists='replace', index=False)

# Insert data into Shipping table
df_shipping = df[['TransactionID', 'ShippingMethod', 'ShippingCost']].copy()
df_shipping.to_sql('Shipping', conn, if_exists='replace', index=False)

# Display data from the Customers table with specific formatting
result_customers = pd.read_sql_query('SELECT * FROM Customers LIMIT 5', conn)
print("\nCustomers Dimension Table:\n")
print(tabulate(result_customers, headers='keys', tablefmt='pretty'))

# Display data from the Products table with specific formatting
result_products = pd.read_sql_query('SELECT * FROM Products LIMIT 5', conn)
print("\nProducts Dimension Table:\n")
print(tabulate(result_products, headers='keys', tablefmt='pretty'))

# Fetch data from the Salespersons table
result_salespersons = pd.read_sql_query('SELECT * FROM Salespersons LIMIT 5', conn)
# Display Salespersons Dimension Table with specific formatting
print("\nSalespersons Dimension Table:\n")
print(tabulate(result_salespersons, headers='keys', tablefmt='pretty'))

# Display data from the Regions table with specific formatting
result_regions = pd.read_sql_query('SELECT * FROM Regions LIMIT 5', conn)
print("\nRegions Dimension Table:\n")
print(tabulate(result_regions, headers='keys', tablefmt='pretty'))

# Display data from the PaymentMethods table with specific formatting
result_payment_methods = pd.read_sql_query('SELECT * FROM PaymentMethods LIMIT 5', conn)
print("\nPaymentMethods Dimension Table:\n")
print(tabulate(result_payment_methods, headers='keys', tablefmt='pretty'))

# Display data from the Ratings table with specific formatting
result_ratings = pd.read_sql_query('SELECT * FROM Ratings LIMIT 5', conn)
print("\nRatings Dimension Table:\n")
print(tabulate(result_ratings, headers='keys', tablefmt='pretty'))

# Display data from the Transactions table with specific formatting
result_transactions = pd.read_sql_query('SELECT * FROM Transactions LIMIT 5', conn)
print("\nTransactions Dimension Table:\n")
print(tabulate(result_transactions, headers='keys', tablefmt='pretty'))

# Display data from the Inventory table with specific formatting
result_inventory = pd.read_sql_query('SELECT * FROM Inventory LIMIT 5', conn)
print("\nInventory Dimension Table:\n")
print(tabulate(result_inventory, headers='keys', tablefmt='pretty'))

# Display data from the Returns table with specific formatting
result_returns = pd.read_sql_query('SELECT * FROM Returns LIMIT 5', conn)
print("\nReturns Dimension Table:\n")
print(tabulate(result_returns, headers='keys', tablefmt='pretty'))

# Display data from the Discounts table with specific formatting
result_discounts = pd.read_sql_query('SELECT * FROM Discounts LIMIT 5', conn)
print("\nDiscounts Dimension Table:\n")
print(tabulate(result_discounts, headers='keys', tablefmt='pretty'))

# Display data from the Promotions table with specific formatting
result_promotions = pd.read_sql_query('SELECT * FROM Promotions LIMIT 5', conn)
print("\nPromotions Dimension Table:\n")
print(tabulate(result_promotions, headers='keys', tablefmt='pretty'))

# Display data from the Shipping table with specific formatting
result_shipping = pd.read_sql_query('SELECT * FROM Shipping LIMIT 5', conn)
print("\nShipping Dimension Table:\n")
print(tabulate(result_shipping, headers='keys', tablefmt='pretty'))


# Close connection
conn.close()

print("Data inserted into all dimension and fact tables successfully!")

# Read data from CSV file
df = pd.read_csv('amazonsales.csv')

# Connect to SQLite database
conn = sqlite3.connect('amazon_sales_dw.db')
c = conn.cursor()

# Insert data into CarSales fact table
df_amazon_sales = df[[
    'TransactionID', 'CustomerID', 'ProductID', 'SalesPersonID', 'RegionID', 'PaymentMethodID', 'PaymentMethod',
    'Quantity'
]]
df_amazon_sales.to_sql('facttable', conn, if_exists='replace', index=False)


# Display data from the CarSales fact table with specific formatting
result_amazon_sales = pd.read_sql_query('SELECT * FROM facttable LIMIT 5', conn)
print("\nAmazon Sales Fact Table:\n")
print(tabulate(result_amazon_sales, headers='keys', tablefmt='pretty'))


# Close connection
conn.close()